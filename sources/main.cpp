#include "mos6502.h"

#include <termios.h>
#include <unistd.h>
#include <fcntl.h>
#include <cstdio>

#define SPEEDDIV 1

uint8_t wozmon[256] = {
    0xD8, 0x58, 0xA0, 0x7F, 0x8C, 0x12, 0xD0, 0xA9, 0xA7, 0x8D, 0x11, 0xD0,
    0x8D, 0x13, 0xD0, 0xC9, 0xDF, 0xF0, 0x13, 0xC9, 0x9B, 0xF0, 0x03, 0xC8,
    0x10, 0x0F, 0xA9, 0xDC, 0x20, 0xEF, 0xFF, 0xA9, 0x8D, 0x20, 0xEF, 0xFF,
    0xA0, 0x01, 0x88, 0x30, 0xF6, 0xAD, 0x11, 0xD0, 0x10, 0xFB, 0xAD, 0x10,
    0xD0, 0x99, 0x00, 0x02, 0x20, 0xEF, 0xFF, 0xC9, 0x8D, 0xD0, 0xD4, 0xA0,
    0xFF, 0xA9, 0x00, 0xAA, 0x0A, 0x85, 0x2B, 0xC8, 0xB9, 0x00, 0x02, 0xC9,
    0x8D, 0xF0, 0xD4, 0xC9, 0xAE, 0x90, 0xF4, 0xF0, 0xF0, 0xC9, 0xBA, 0xF0,
    0xEB, 0xC9, 0xD2, 0xF0, 0x3B, 0x86, 0x28, 0x86, 0x29, 0x84, 0x2A, 0xB9,
    0x00, 0x02, 0x49, 0xB0, 0xC9, 0x0A, 0x90, 0x06, 0x69, 0x88, 0xC9, 0xFA,
    0x90, 0x11, 0x0A, 0x0A, 0x0A, 0x0A, 0xA2, 0x04, 0x0A, 0x26, 0x28, 0x26,
    0x29, 0xCA, 0xD0, 0xF8, 0xC8, 0xD0, 0xE0, 0xC4, 0x2A, 0xF0, 0x97, 0x24,
    0x2B, 0x50, 0x10, 0xA5, 0x28, 0x81, 0x26, 0xE6, 0x26, 0xD0, 0xB5, 0xE6,
    0x27, 0x4C, 0x44, 0xFF, 0x6C, 0x24, 0x00, 0x30, 0x2B, 0xA2, 0x02, 0xB5,
    0x27, 0x95, 0x25, 0x95, 0x23, 0xCA, 0xD0, 0xF7, 0xD0, 0x14, 0xA9, 0x8D,
    0x20, 0xEF, 0xFF, 0xA5, 0x25, 0x20, 0xDC, 0xFF, 0xA5, 0x24, 0x20, 0xDC,
    0xFF, 0xA9, 0xBA, 0x20, 0xEF, 0xFF, 0xA9, 0xA0, 0x20, 0xEF, 0xFF, 0xA1,
    0x24, 0x20, 0xDC, 0xFF, 0x86, 0x2B, 0xA5, 0x24, 0xC5, 0x28, 0xA5, 0x25,
    0xE5, 0x29, 0xB0, 0xC1, 0xE6, 0x24, 0xD0, 0x02, 0xE6, 0x25, 0xA5, 0x24,
    0x29, 0x07, 0x10, 0xC8, 0x48, 0x4A, 0x4A, 0x4A, 0x4A, 0x20, 0xE5, 0xFF,
    0x68, 0x29, 0x0F, 0x09, 0xB0, 0xC9, 0xBA, 0x90, 0x02, 0x69, 0x06, 0x2C,
    0x12, 0xD0, 0x30, 0xFB, 0x8D, 0x12, 0xD0, 0x60, 0x00, 0x00, 0x00, 0x0F,
    0x00, 0xFF, 0x00, 0x00
};

uint8_t memory[0x8000];

uint8_t prevprint = 0x00;
uint8_t pressed = 0x00;

uint8_t read(uint16_t address) {
    if(address <= 0x7FFF) return memory[address];
    else if(address == 0xD010) {
        uint8_t oldprs = pressed | 0x80;
        pressed = 0;
        return oldprs;
    }
    else if(address == 0xD011) {
        if(pressed != 0) return 0x80;
        else return 0x00;
    }
    else if(address == 0xD012) return prevprint;
    else if(address >= 0xFF00) return wozmon[address - 0xFF00];
    return 0xFF;
}

void write(uint16_t address, uint8_t value) {
    if(address <= 0x7FFF) memory[address] = value;
    else if(address == 0xD012) {
        if((value & ~(1 << 7)) == 0x0D) printf("\n");
        // 0x7F exclusion is a Wozmon patch
        else if((value & ~(1 << 7)) != 0x7F) printf("%c", value & ~(1 << 7));
        prevprint = value & ~(1 << 7);
    }
}

void set_nonblocking(bool enable) {
    int flags = fcntl(STDIN_FILENO, F_GETFL, 0);
    if (enable)
        fcntl(STDIN_FILENO, F_SETFL, flags | O_NONBLOCK);
    else
        fcntl(STDIN_FILENO, F_SETFL, flags & ~O_NONBLOCK);
}

int main() {
    termios oldt, newt;
    tcgetattr(STDIN_FILENO, &oldt);
    newt = oldt;
    newt.c_lflag &= ~(ICANON | ECHO);
    tcsetattr(STDIN_FILENO, TCSANOW, &newt);

    set_nonblocking(true);

    mos6502 cpu(read, write);

    cpu.Reset();

    while (true) {
        uint64_t cyclecount = 0;
        int c = getchar();
        if (c != EOF) {
            if(c == '\n') pressed = 0x0D;
            else pressed = c;
        }
        cpu.Run(1, cyclecount);
        usleep(SPEEDDIV * cyclecount);
    }

    set_nonblocking(false);
    tcsetattr(STDIN_FILENO, TCSANOW, &oldt);
    return 0;
}
